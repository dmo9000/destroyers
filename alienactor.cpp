#include <cassert>
#include <cstdlib>
#include "alienactor.h"
#include "world.h"


int pixels_A[2][16][16] {
    {
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0 },
        { 0,0,0,0,1,1,0,1,1,0,1,1,0,0,0,0 },
        { 0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0 },
        { 0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0 },
        { 0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
    },
    {
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0 },
        { 0,0,0,0,1,1,0,1,1,0,1,1,0,0,0,0 },
        { 0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0 },
        { 0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0 },
        { 0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
    }
};

int pixels_B[2][16][16] {
    {
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0 },
        { 0,0,0,0,1,1,0,1,1,0,1,1,0,0,0,0 },
        { 0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0 },
        { 0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0 },
        { 0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
    },
    {
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0 },
        { 0,0,0,0,1,1,0,1,1,0,1,1,0,0,0,0 },
        { 0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0 },
        { 0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
    }
};

int pixels_C[2][16][16] {
    {
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0 },
        { 0,0,0,0,1,1,0,1,1,0,1,1,0,0,0,0 },
        { 0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0 },
        { 0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
    },
    {
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0 },
        { 0,0,0,0,1,1,0,1,1,0,1,1,0,0,0,0 },
        { 0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,1,1,0,1,1,0,1,1,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
    }
};

int pixels_D[2][16][16] {
    {
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0 },
        { 0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
    },
    {
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
    }
};


int pixels_E[2][16][16] {
    {
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0 },
        {	0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0 },
        {	0,0,0,1,1,1,0,1,1,0,1,1,1,0,0,0 },
        {	0,0,0,0,1,1,0,1,1,0,1,1,0,0,0,0 },
        { 0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0 },
        { 0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0 },
        { 0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
    },
    {
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0 },
        {	0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0 },
        {	0,0,0,1,1,1,0,1,1,0,1,1,1,0,0,0 },
        {	0,0,0,1,0,1,0,1,1,0,1,0,1,0,0,0 },
        { 0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0 },
        { 0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0 },
        { 0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
    }
};

AlienActor::AlienActor()
{

    //std::cerr << "AlienActor created" << std::endl;
    //bShowDebug = true;
    //TickFreq = 2500.0f;
    TickFreq = 250.0f;
    bCanEverTick = true;
    bShowDebug = false;

}

AlienActor::~AlienActor()
{

//    std::cerr << "AlienActor destroyed" << std::endl;

}


int AlienActor::Render()
{
    Vector2 MyLocation;
    int (*pixels)[16][16];

    switch (AnimationType % 5) {
    case 0:
        pixels = pixels_A;
        break;
    case 1:
        pixels = pixels_B;
        break;
    case 2:
        pixels = pixels_C;
        break;
    case 3:
        pixels = pixels_D;
        break;
    case 4:
        pixels = pixels_E;
        break;
    }

    /* declared virtual, and usually overridden by derived class */
    if (bShowDebug) {
        std::cerr << "AlienActor::Render()" << std::endl;
    }
    assert(MyBackPlane);
    MyBackPlane->GetFormationPosition(&MyLocation, GridX, GridY);
    if (bShowDebug) {
        std::cerr << "MyLocation = " << MyLocation.x << ", " << MyLocation.y << std::endl;
    }

//		grx_line(MyLocation.x, MyLocation.y, MyLocation.x + 48, MyLocation.y + 48, 255, 0, 0);
//		grx_line(MyLocation.x, MyLocation.y+48, MyLocation.x + 48, MyLocation.y, 255, 0, 0);


    for (int ii = 0; ii < 16; ii++) {
        for (int jj = 0; jj < 16; jj++) {
            if (pixels[AnimationPhase][jj][ii]) {
                int xoffset = MyLocation.x + (ii * 3);
                int yoffset = MyLocation.y + (jj * 3);

//                setTexturePixel(MyLocation.x + ii, MyLocation.y + jj, 255, 255, 255);
                /*
                BaseColor.r = rand() % 255;
                BaseColor.g = rand() % 255;
                BaseColor.b = rand() % 255;
                */
                grx_fillbox(xoffset, yoffset, xoffset+2, yoffset+2, BaseColor.r, BaseColor.g, BaseColor.b);
            }
        }
    }

}

int AlienActor::Tick()
{

    /* declared virtual, and usually overridden by derived class */
    if (bShowDebug) {
        std::cerr << "AlienActor Tick" << std::endl;
    }
    AnimationPhase = AnimationPhase + 1;
    AnimationPhase = (AnimationPhase % 2);
}

int AlienActor::SetBackPlane(AlienBackPlane *bp)
{

    MyBackPlane = bp;
    return 0;
}


int AlienActor::SetGridLocation(int x, int y)
{

//  std::cerr << "AlienActor::SetGridLocation(" << x << ", " << y << ")" << std::endl;
    GridX = x;
    GridY = y;
    return 0;
}

int AlienActor::SetBaseColor(Vector3 V)
{
    BaseColor.r = V.r;
    BaseColor.g = V.g;
    BaseColor.b = V.b;

}

int AlienActor::SetAnimationType(int t)
{

    AnimationType = t;
    return 1;
}
